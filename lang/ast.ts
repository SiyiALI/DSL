/******************************************************************************
 * This file was generated by langium-cli 4.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const BoardRaceTerminals = {
    COMMENT: /\/\/[^\n]*|\/\*[^*]*\*+([^/*][^*]*\*+)*\//,
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    INT: /[0-9]+/,
    SIGNED_INT: /[-+]?[0-9]+/,
    STRING: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export type BoardRaceTerminalNames = keyof typeof BoardRaceTerminals;

export type BoardRaceKeywordNames =
    | ":"
    | ";"
    | "="
    | "board"
    | "bounce"
    | "bright"
    | "cell"
    | "cells"
    | "color"
    | "d"
    | "dark"
    | "dice"
    | "exact"
    | "game"
    | "jump"
    | "layout"
    | "lose"
    | "move"
    | "overflow"
    | "pathType"
    | "player"
    | "players"
    | "repeat"
    | "rules"
    | "snake"
    | "spiral"
    | "stop"
    | "to"
    | "turns"
    | "ui"
    | "uiTheme"
    | "win"
    | "{"
    | "}";

export type BoardRaceTokenNames = BoardRaceTerminalNames | BoardRaceKeywordNames;

export interface Board extends langium.AstNode {
    readonly $container: Game;
    readonly $type: 'Board';
    size: number;
    specials: Array<SpecialCell>;
}

export const Board = {
    $type: 'Board',
    size: 'size',
    specials: 'specials'
} as const;

export function isBoard(item: unknown): item is Board {
    return reflection.isInstance(item, Board.$type);
}

export interface Dice extends langium.AstNode {
    readonly $container: Rules;
    readonly $type: 'Dice';
    count?: number;
    faces: number;
}

export const Dice = {
    $type: 'Dice',
    count: 'count',
    faces: 'faces'
} as const;

export function isDice(item: unknown): item is Dice {
    return reflection.isInstance(item, Dice.$type);
}

export type Effect = Jump | Lose | Move;

export const Effect = {
    $type: 'Effect'
} as const;

export function isEffect(item: unknown): item is Effect {
    return reflection.isInstance(item, Effect.$type);
}

export interface Game extends langium.AstNode {
    readonly $type: 'Game';
    board: Board;
    layout?: Layout;
    name: string;
    players: Players;
    rules?: Rules;
    ui?: UI;
}

export const Game = {
    $type: 'Game',
    board: 'board',
    layout: 'layout',
    name: 'name',
    players: 'players',
    rules: 'rules',
    ui: 'ui'
} as const;

export function isGame(item: unknown): item is Game {
    return reflection.isInstance(item, Game.$type);
}

export interface Jump extends langium.AstNode {
    readonly $container: SpecialCell;
    readonly $type: 'Jump';
    target: number;
}

export const Jump = {
    $type: 'Jump',
    target: 'target'
} as const;

export function isJump(item: unknown): item is Jump {
    return reflection.isInstance(item, Jump.$type);
}

export interface Layout extends langium.AstNode {
    readonly $container: Game;
    readonly $type: 'Layout';
    path: PathType;
}

export const Layout = {
    $type: 'Layout',
    path: 'path'
} as const;

export function isLayout(item: unknown): item is Layout {
    return reflection.isInstance(item, Layout.$type);
}

export interface Lose extends langium.AstNode {
    readonly $container: SpecialCell;
    readonly $type: 'Lose';
    turns: number;
}

export const Lose = {
    $type: 'Lose',
    turns: 'turns'
} as const;

export function isLose(item: unknown): item is Lose {
    return reflection.isInstance(item, Lose.$type);
}

export interface Move extends langium.AstNode {
    readonly $container: SpecialCell;
    readonly $type: 'Move';
    offset: string;
}

export const Move = {
    $type: 'Move',
    offset: 'offset'
} as const;

export function isMove(item: unknown): item is Move {
    return reflection.isInstance(item, Move.$type);
}

export type Overflow = 'bounce' | 'exact' | 'stop';

export function isOverflow(item: unknown): item is Overflow {
    return item === 'bounce' || item === 'exact' || item === 'stop';
}

export type PathType = 'snake' | 'spiral';

export function isPathType(item: unknown): item is PathType {
    return item === 'snake' || item === 'spiral';
}

export interface Player extends langium.AstNode {
    readonly $container: Players;
    readonly $type: 'Player';
    color?: string;
    name: string;
}

export const Player = {
    $type: 'Player',
    color: 'color',
    name: 'name'
} as const;

export function isPlayer(item: unknown): item is Player {
    return reflection.isInstance(item, Player.$type);
}

export interface Players extends langium.AstNode {
    readonly $container: Game;
    readonly $type: 'Players';
    players: Array<Player>;
}

export const Players = {
    $type: 'Players',
    players: 'players'
} as const;

export function isPlayers(item: unknown): item is Players {
    return reflection.isInstance(item, Players.$type);
}

export type Repeat = 'repeat';

export function isRepeat(item: unknown): item is Repeat {
    return item === 'repeat';
}

export interface Rules extends langium.AstNode {
    readonly $container: Game;
    readonly $type: 'Rules';
    dice?: Dice;
    overflow?: Overflow;
}

export const Rules = {
    $type: 'Rules',
    dice: 'dice',
    overflow: 'overflow'
} as const;

export function isRules(item: unknown): item is Rules {
    return reflection.isInstance(item, Rules.$type);
}

export interface SpecialCell extends langium.AstNode {
    readonly $container: Board;
    readonly $type: 'SpecialCell';
    effect: Effect;
    index: number;
}

export const SpecialCell = {
    $type: 'SpecialCell',
    effect: 'effect',
    index: 'index'
} as const;

export function isSpecialCell(item: unknown): item is SpecialCell {
    return reflection.isInstance(item, SpecialCell.$type);
}

export interface UI extends langium.AstNode {
    readonly $container: Game;
    readonly $type: 'UI';
    theme: UITheme;
}

export const UI = {
    $type: 'UI',
    theme: 'theme'
} as const;

export function isUI(item: unknown): item is UI {
    return reflection.isInstance(item, UI.$type);
}

export type UITheme = 'bright' | 'dark';

export function isUITheme(item: unknown): item is UITheme {
    return item === 'bright' || item === 'dark';
}

export type Win = 'win';

export function isWin(item: unknown): item is Win {
    return item === 'win';
}

export type BoardRaceAstType = {
    Board: Board
    Dice: Dice
    Effect: Effect
    Game: Game
    Jump: Jump
    Layout: Layout
    Lose: Lose
    Move: Move
    Player: Player
    Players: Players
    Rules: Rules
    SpecialCell: SpecialCell
    UI: UI
}

export class BoardRaceAstReflection extends langium.AbstractAstReflection {
    override readonly types = {
        Board: {
            name: Board.$type,
            properties: {
                size: {
                    name: Board.size
                },
                specials: {
                    name: Board.specials,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        Dice: {
            name: Dice.$type,
            properties: {
                count: {
                    name: Dice.count
                },
                faces: {
                    name: Dice.faces
                }
            },
            superTypes: []
        },
        Effect: {
            name: Effect.$type,
            properties: {
            },
            superTypes: []
        },
        Game: {
            name: Game.$type,
            properties: {
                board: {
                    name: Game.board
                },
                layout: {
                    name: Game.layout
                },
                name: {
                    name: Game.name
                },
                players: {
                    name: Game.players
                },
                rules: {
                    name: Game.rules
                },
                ui: {
                    name: Game.ui
                }
            },
            superTypes: []
        },
        Jump: {
            name: Jump.$type,
            properties: {
                target: {
                    name: Jump.target
                }
            },
            superTypes: [Effect.$type]
        },
        Layout: {
            name: Layout.$type,
            properties: {
                path: {
                    name: Layout.path
                }
            },
            superTypes: []
        },
        Lose: {
            name: Lose.$type,
            properties: {
                turns: {
                    name: Lose.turns
                }
            },
            superTypes: [Effect.$type]
        },
        Move: {
            name: Move.$type,
            properties: {
                offset: {
                    name: Move.offset
                }
            },
            superTypes: [Effect.$type]
        },
        Player: {
            name: Player.$type,
            properties: {
                color: {
                    name: Player.color
                },
                name: {
                    name: Player.name
                }
            },
            superTypes: []
        },
        Players: {
            name: Players.$type,
            properties: {
                players: {
                    name: Players.players,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        Rules: {
            name: Rules.$type,
            properties: {
                dice: {
                    name: Rules.dice
                },
                overflow: {
                    name: Rules.overflow
                }
            },
            superTypes: []
        },
        SpecialCell: {
            name: SpecialCell.$type,
            properties: {
                effect: {
                    name: SpecialCell.effect
                },
                index: {
                    name: SpecialCell.index
                }
            },
            superTypes: []
        },
        UI: {
            name: UI.$type,
            properties: {
                theme: {
                    name: UI.theme
                }
            },
            superTypes: []
        }
    } as const satisfies langium.AstMetaData
}

export const reflection = new BoardRaceAstReflection();
